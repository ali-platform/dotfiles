#!/bin/env bash
# This script is designed to sourced from your shell to set the AWS_PROFILE variable

# If bootstrap.json does not exist, exit with an error
if [ ! -f bootstrap.json ]; then
  echo -e "\033[0;31mThis script relies on bootstrap.json being in the current directory.\033[0m"
else
  # If a command line argument is not specified, get the stackName from bootstrap.json
  # where from the first entry in the stacks array that has workingStack = true
  if [ -z "$1" ]; then
      export STACK=$(jq -r '.stacks[] | select(.workingStack == true) | .stackName' < bootstrap.json)
  else
      export STACK=$1
      # If a stackName is specified, name sure it exists in the stacks array in bootstrap.json
      if ! jq -e '.stacks[] | select(.stackName == "'$STACK'")' < bootstrap.json > /dev/null; then
          echo -e "\033[0;31mStack name $STACK not found in bootstrap.json\033[0m"
          unset STACK
      fi
  fi

  if [ "$STACK" ]; then
    # Get the accountName from the stacks array in bootstrap.json
    export AWS_PROFILE=$(jq -r '.stacks[] | select(.stackName == "'$STACK'") | .accountName' < bootstrap.json)

    echo -e "\033[0;36mUsing AWS account $AWS_PROFILE\033[0m"
    MIN_LEFT=30

    # Pick date command (gdate on macOS with coreutils)
    DATEBIN="date"
    if command -v gdate >/dev/null 2>&1; then DATEBIN="gdate"; fi

    EXP_ISO="$(aws configure export-credentials --profile "$AWS_PROFILE" --format process 2>/dev/null | jq -r '.Expiration')"
    EXP_EPOCH="$("$DATEBIN" -u -d "$EXP_ISO" +%s 2>/dev/null || return 1)"

    NOW_EPOCH="$("$DATEBIN" -u +%s)"
    REMAIN_SECS=$(( EXP_EPOCH - NOW_EPOCH ))
    REQUIRED_SECS=$(( MIN_LEFT * 60 ))

    if (( REMAIN_SECS >= REQUIRED_SECS )); then
      # Success
      REMAIN_MIN=$(( REMAIN_SECS / 60 ))
      echo "OK: ${REMAIN_MIN} minutes left (expires at ${EXP_ISO})."
    else
      # Not enough time left
      if (( REMAIN_SECS > 0 )); then
        REMAIN_MIN=$(( REMAIN_SECS / 60 ))
        echo "NOT OK: only ${REMAIN_MIN} minutes left (expires at ${EXP_ISO})." >&2
      else
        echo "NOT OK: credentials already expired (expired at ${EXP_ISO})." >&2
      fi
      echo -e "\033[0;36mAuthenticating with SSO\033[0m"
      aws sso login
    fi

    CLUSTER=$(aws eks list-clusters --query clusters[0] --output text)
    if [[ "$CLUSTER" != "None" ]]
    then
      echo -e "\033[0;36mAuthenticating to the $CLUSTER kubernetes cluster\033[0m"
      aws eks update-kubeconfig --region us-east-2 --name $CLUSTER --alias $CLUSTER
    fi

    echo -e "\033[0;36mSelecting the $STACK pulumi stack\033[0m"
    pulumi stack select $STACK
  fi
fi

