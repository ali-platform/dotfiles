#!/usr/bin/env pwsh

Write-Host -ForegroundColor Cyan "Updating yarn"
@'
node_modules
.yarn
.repo
yarn-error.log
state*.json
'@ | Set-Content ./.gitignore

@'
nodeLinker: node-modules
npmScopes:
  acceleratelearning:
    npmRegistryServer: https://npm.pkg.github.com
    npmAuthToken: ${ALI_GITHUB_PACKAGE_READER_TOKEN}
'@ | Set-Content ./.yarnrc.yml

Remove-Item ./.npmrc -Force -ErrorAction SilentlyContinue

yarn set version stable
yarn install

Write-Host -ForegroundColor Cyan "Adding yarn packages"
yarn add -D @tsconfig/recommended @types/node @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint eslint-config-prettier eslint-plugin-prettier prettier typescript
npx yarn-upgrade-all

New-Item ".vscode" -ItemType Directory -Force | Out-Null
$file = ".vscode/extensions.json"
Write-Host -ForegroundColor Cyan "Updating $file"
$config = Get-Content $file -ErrorAction:SilentlyContinue | ConvertFrom-Json -AsHashTable
if (-Not $config ) { $config = [ordered]@{} }
if (-Not $config.recommendations) { $config.recommendations = @() }
if ($config.recommendations -notcontains "dbaeumer.vscode-eslint") { $config.recommendations += "dbaeumer.vscode-eslint" }
if ($config.recommendations -notcontains "rvest.vs-code-prettier-eslint") { $config.recommendations += "rvest.vs-code-prettier-eslint" }
$config.recommendations = $config.recommendations | Sort-Object | Get-Unique
$config | ConvertTo-Json -Depth 10 | Set-Content $file

$file = ".vscode/settings.json"
Write-Host -ForegroundColor Cyan "Updating $file"
$config = Get-Content $file -ErrorAction:SilentlyContinue | ConvertFrom-Json -AsHashTable
if (-Not $config ) { $config = [ordered]@{} }
$config["yaml.schemas"] = [ordered]@{
    "https://json.schemastore.org/github-workflow.json" = @("file:.github/workflows/*.yaml")
}
$config["eslint.validate"] =  @("javascript","javascriptreact","typescript","typescriptreact")
$config["editor.codeActionsOnSave"] = [ordered]@{
    "source.fixAll.eslint" = "explicit"
}
$config["editor.formatOnPaste"] = $false
$config["editor.formatOnType"] = $false
$config["editor.formatOnSave"] = $true
$config["editor.formatOnSaveMode"] = "file"
$config["editor.insertSpaces"] = $true
$config["editor.autoIndent"] = "keep"
$config["files.autoSave"] = "onFocusChange"
$config["editor.tabSize"] = 2
$config["vs-code-prettier-eslint.prettierLast"] = $false
$config["[typescript]"] = [ordered]@{
    "editor.defaultFormatter" = "esbenp.prettier-vscode"
    "editor.tabSize" = 2
}
$config["[yaml]"] = [ordered]@{
    "editor.defaultFormatter" = "ms-kubernetes-tools.vscode-kubernetes-tools"
}
$config["[helm]"] = [ordered]@{
    "editor.defaultFormatter" = "ms-kubernetes-tools.vscode-kubernetes-tools"
}

$spellingWords = @(
    "acceleratelearning",
    "accessanalyzer",
    "acmpca",
    "alertmanager",
    "aoss",
    "apiextensions",
    "applicationloadbalancing",
    "argocd",
    "argoproj",
    "autoscale",
    "autoscaler",
    "autotag",
    "awskms",
    "awsnodetemplates",
    "AWSReservedSSO_Operator_e856238adcb5c120",
    "AWSReservedSSO_SuperUser_4faef8b9354a9c1e",
    "awsx",
    "backoff",
    "bitnami",
    "bootstrappers",
    "Bypassers",
    "cdms",
    "chatwork",
    "clientvpn",
    "cloudhsmv2",
    "clusterrole",
    "clusterrolebinding",
    "codeartifact",
    "codeartifactaccess",
    "codestarnotifications",
    "Coip",
    "configmap",
    "coredns",
    "crds",
    "creds",
    "crio",
    "cschleiden",
    "csistoragecapacities",
    "customresourcedefinition",
    "daemonset",
    "dataplane",
    "dbaeumer",
    "dbuser",
    "demoapp",
    "devcontainer",
    "directoryservice",
    "distro",
    "docdb",
    "dockerconfigjson",
    "dualstack",
    "ebpf",
    "EBSCSI",
    "eksbuild",
    "elasticloadbalancingv",
    "elbv",
    "encryptedkey",
    "endpointslices",
    "esbenp",
    "finalizer",
    "finalizers",
    "github",
    "graphana",
    "healthcheck",
    "healthz",
    "imagepullsecret",
    "ingressgateway",
    "ipam",
    "Iscsi",
    "istio",
    "istiod",
    "karpenter",
    "kubeconfig",
    "kubelet",
    "kustomize",
    "learnosity",
    "licensemanager",
    "limitranges",
    "loadbalancer",
    "logtag",
    "maildev",
    "mathnation",
    "mutatingwebhookconfiguration",
    "networkpolicies",
    "nodeclaims",
    "nodeclasses",
    "Nodegroup",
    "nodepool",
    "nodepools",
    "npmjs",
    "oidc",
    "oidcs",
    "oneroster",
    "persistentvolumeclaims",
    "poddisruptionbudget",
    "poddisruptionbudgets",
    "podtemplates",
    "portforward",
    "promtail",
    "proxier",
    "pulumi",
    "pulumibucketaccess",
    "pulumikeyaccess",
    "pulumiobjectaccess",
    "pwsh",
    "rebalance",
    "replicasets",
    "replicationcontrollers",
    "resourcegroups",
    "resourcequotas",
    "restrictor",
    "rolebinding",
    "rolebindings",
    "secretsprovider",
    "serverside",
    "serviceaccount",
    "serviceaccounts",
    "ssoadmin",
    "statefulset",
    "statefulsets",
    "stemscopes",
    "storageclass",
    "studyedge",
    "studysocial",
    "targetgroup",
    "transitgateway",
    "unprotect",
    "USERPROFILE",
    "validatingwebhookconfiguration",
    "validationRecordFqdns",
    "wafregional",
    "wafv",
    "xlarge",
    "xvda",
    "xvdb",
    "xvdc",
    "yzhang",
    "ztunnel"
)
if (-Not $config["cSpell.words"]) { $config["cSpell.words"] = @() }
foreach ($word in $spellingWords) {
    if ($config["cSpell.words"] -notcontains $word) {
        $config["cSpell.words"] += $word
    }
}
$config["cSpell.words"] = $config["cSpell.words"] | Sort-Object | Get-Unique

$config | ConvertTo-Json -Depth 10 | Set-Content $file

$file = ".eslintrc.json"
Write-Host -ForegroundColor Cyan "Updating $file"
[ordered]@{
    "extends" = @("eslint:recommended","plugin:prettier/recommended","plugin:@typescript-eslint/recommended")
    "plugins" = @("prettier","@typescript-eslint")
    "rules" = [ordered]@{
        "eqeqeq" = "error"
        "no-console" = "warn"
        "no-undef" = "off"
        "no-unused-vars" = "off"
        "prettier/prettier" = "error"
        "@typescript-eslint/explicit-module-boundary-types" = "off"
        "@typescript-eslint/explicit-function-return-type" = "off"
        "@typescript-eslint/no-explicit-any" = "error"
        "@typescript-eslint/no-unused-vars" = "warn"
    }
    "parser" = "@typescript-eslint/parser"
    "parserOptions" = [ordered]@{
        "ecmaVersion" = 6
        "sourceType" = "module"
    }
    "env" = [ordered]@{
        "browser" = $true
        "node" = $true
        "es6" = $true
        "jest" = $true
    }
    "ignorePatterns" = @("node_modules","build","dist","public")
} | ConvertTo-Json -Depth 10 | Set-Content $file

$file = ".prettierrc"
Write-Host -ForegroundColor Cyan "Updating $file"
[ordered]@{
    "printWidth" = 120
    "singleQuote" = $true
    "tabWidth" = 2
    "trailingComma" = "es5"
    "useTabs" = $false
} | ConvertTo-Json -Depth 10 | Set-Content $file
Remove-Item "prettierrc" -ErrorAction:SilentlyContinue

$file = "tsconfig.json"
Write-Host -ForegroundColor Cyan "Updating $file"
$config = Get-Content $file -ErrorAction:SilentlyContinue | ConvertFrom-Json -AsHashTable
if (-Not $config ) { $config = @{} }
if (-Not $config.include) { $config.include = @() }
if ($config.include -notcontains "*.ts") { $config.include += "*.ts" }
$config | ConvertTo-Json -Depth 10 | Set-Content $file

Write-Host -ForegroundColor Cyan "Checking for workflow changes"
Get-ChildItem .github/workflows -ErrorAction SilentlyContinue | ForEach-Object {
    $workflow = Get-Content $_
    $changes = $false
    $workflow = $workflow | ForEach-Object {
        if ($_ -match 'acceleratelearning/workflow-pull-request-checks/\.github/workflows/shared-workflow.yaml@v[1-2]') {
            $_ -replace '@v[1-3]','@v3'
            $changes = $true
        }
        elseif ($_ -match 'acceleratelearning/workflow-pulumi-pull-request/.github/workflows/shared-workflow.yaml@v[1-3]') {
            $_ -replace '@v[1-3]','@v4'
            $changes = $true
        }
        elseif ($_ -match 'acceleratelearning/workflow-pulumi-up/.github/workflows/shared-workflow.yaml@v[1-3]') {
            $_ -replace '@v[1-3]','@v4'
            $changes = $true
        }
        elseif ($_ -match 'npm-auth-token') {
            $_ -replace 'npm-auth-token','yarn-auth-token'
            $changes = $true
        }
        else {
            $_
        }
    }
    if ($changes) {
        Write-Host -ForegroundColor Yellow "Updating $($_.Name)"
        $workflow | Set-Content $_
    }
}

if (Test-Path login.sh) {
    Write-Host -ForegroundColor Cyan "Removing login.sh"
    Remove-Item login.sh
}

if (Test-Path .yarn/install-state.gz) {
    Write-Host -ForegroundColor Cyan "Removing .yarn/install-state.gz"
    Remove-Item .yarn/install-state.gz
}

Get-ChildItem *.yaml -ErrorAction SilentlyContinue | ForEach-Object {
    $file = $_
    Write-Host -ForegroundColor Cyan "Updating $file"
    Get-Content $file | yq 'del(.. | select(has("aws-migration-project-id")))' | Set-Content $file
}