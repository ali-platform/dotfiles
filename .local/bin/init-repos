#!/usr/bin/env pwsh
[CmdletBinding()]
param (
    [Parameter()]
    [Switch]
    $Refresh    # Update folders that are already present
)

function CloneRepos([string]$folder, [Object[]]$repos, [bool]$refresh) {
    $folder_list = @(
        "action",
        "aws-account",
        "cloud-engineering",
        "container",
        "github",
        "ss-github",
        "kubernetes",
        "packer",
        "php-lib",
        "platform",
        "pulumi",
        "repository-template",
        "workflow"
    )

    if ($repos) {
        $repos | ForEach-Object {
            $repo_name = $_.name
            $sub_folder = $folder_list | Where-Object { $repo_name.StartsWith($_) }
            $path = Join-Path $env:HOME "src" $folder $sub_folder
            if (-Not (Test-Path $path)) {
                New-Item $path -ItemType Directory -Force | Out-Null
            }
            $path = Join-Path $path $repo_name
            if (-Not (Test-Path $path)) {
                $git_url = "$($_.url).git"
                Write-Host -ForegroundColor Cyan "Cloning $git_url"
                git clone $git_url $path
            }
            else {
                if ($refresh) {
                    Write-Host -ForegroundColor Cyan "Updating $repo_name"
                    Push-Location $path
                    git pull
                    Pop-Location
                }
            }
            $tags = @()
            if ($sub_folder) {
                $tags += "$folder/$sub_folder"
            }
            else {
                $tags += "$folder"
            }
            [PSCustomObject]@{
                name     = $repo_name
                rootPath = "vscode-remote://wsl+$($env:WSL_DISTRO_NAME)/$path"
                tags     = $tags
                enabled  = $true
            }
        }
    }
    else {
        @()
    }
}


if ($env:APPDATA) {
    $github_profile = (Get-Content "$($env:APPDATA)/GitHub CLI/hosts.yml" | ConvertFrom-Yaml).'github.com'.user
}
elseif ($env:HOME) {
    $github_profile = (Get-Content "$($env:HOME)/.config/gh/hosts.yml" | ConvertFrom-Yaml).'github.com'.user
}
else {
    throw "Unable to locate GitHub user profile name, try gh auth login"
}

$project_items = @()
$repos = @(
    @{
        name = "dotfiles"
        url  = "https://github.com/$github_profile/dotfiles"
    }
)
$project_items += CloneRepos $github_profile $repos $Refresh.IsPresent


$repos = gh repo list AccelerateLearning --no-archived --json "name,url" --limit 300 | ConvertFrom-Json | Sort-Object name
$project_items += CloneRepos "AccelerateLearning" $repos $Refresh.IsPresent

$repos = gh repo list ali-platform --no-archived --json "name,url" --limit 300 | ConvertFrom-Json | Sort-Object name
$project_items += CloneRepos "ali-platform" $repos $Refresh.IsPresent

$repos = gh repo list ali-internal-systems --no-archived --json "name,url" --limit 300 | ConvertFrom-Json | Sort-Object name
$project_items += CloneRepos "ali-internal-systems" $repos $Refresh.IsPresent

$repos = gh repo list stemscopes-v3 --no-archived --json "name,url" --limit 300 | ConvertFrom-Json | Sort-Object name
$project_items += CloneRepos "stemscopes-v3" $repos $Refresh.IsPresent

# Create project manager file
$path = "$($env:USERPROFILE)/AppData/Roaming/Code/User/globalStorage/alefragnani.project-manager"
if (-Not (Test-Path $path)) {
    New-Item -ItemType Directory $path -Force -ErrorAction SilentlyContinue | Out-Null
}

$project_items | ConvertTo-Json | Set-Content "$path/projects.json"
